{"version":3,"sources":["reportWebVitals.js","redux/types.js","redux/actions.js","components/alert.js","components/PostForm.js","components/Post.js","components/Posts.js","components/FetchedPosts.js","App.js","redux/appReducer.js","redux/postReducer.js","redux/rootReducers.js","redux/sagas.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CREATE_POST","FETCHED_POST","SHOW_LOADER","HIDE_LOADER","SHOW_ALERT","HIDE_ALERT","REQUEST_POSTS","hideLoader","type","showAlert","text","dispatch","payload","setTimeout","Alert","className","role","PostForm","props","submitHandler","e","preventDefault","title","state","trim","newPost","id","Date","now","toString","createPost","reset","setState","handleInputChange","prev","target","name","value","onSubmit","this","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","app","alert","myPosts","posts","length","map","Post","useDispatch","useSelector","fetchedPosts","loader","loading","postLength","console","log","onClick","App","FetchedPosts","initialState","rootReducer","combineReducers","action","concat","sagaWorker","sagaWatcher","put","call","fetchData","message","a","fetch","response","json","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","run","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76694dff.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CREATE_POST = 'POST/CREATE_POST'\nexport const FETCHED_POST = 'POST/FETCHED_POST'\nexport const SHOW_LOADER = 'APP/SHOW_LOADER'\nexport const HIDE_LOADER = 'APP/HIDE_POST'\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\nexport const REQUEST_POSTS = 'POST/REQUEST_POSTS'","import { CREATE_POST, FETCHED_POST, HIDE_ALERT, HIDE_LOADER, REQUEST_POSTS, SHOW_ALERT, SHOW_LOADER } from \"./types\";\n\nexport function createPost(post) {\n   return {\n      type: CREATE_POST,\n      payload: post\n   }\n}\n\nexport function showLoader() {\n   return {\n      type: SHOW_LOADER\n   }\n}\nexport function hideLoader() {\n   return {\n      type: HIDE_LOADER\n   }\n}\n\nexport function showAlert(text) {\n\n   return dispatch => {\n      dispatch({\n         type: SHOW_ALERT,\n         payload: text\n      })\n      setTimeout(() => {\n        dispatch (hideAlert())\n      },2000)\n   }\n\n   \n}\nexport function hideAlert() {\n   return {\n      type: HIDE_ALERT\n   }\n}\n\nexport function fetchPosts() {\n   return {\n      type: REQUEST_POSTS\n   }\n   // return async dispatch => {\n   //    try{\n   //     dispatch(showLoader())\n   //    const response = await fetch('shttps://jsonplaceholder.typicode.com/posts?_limit=6')\n   //    const json = await response.json()\n   //      setTimeout(()=>{dispatch({ type: FETCHED_POST, payload: json })\n   //    dispatch(hideLoader())}, 1000)\n      \n   //    }catch(e) {\n   //       dispatch(showAlert(e.message))\n   //       dispatch(hideLoader())\n   //    }\n      \n   // }\n    \n}","import React from 'react'\n\nexport const Alert = ({text}) => {\n   return <div className=\"alert alert-warning\" role=\"alert\">\n  {text}\n   </div> \n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport { createPost, showAlert } from '../redux/actions.js'\nimport {Alert} from '../components/alert.js'\n\n class PostForm extends React.Component{\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: ''\n        }\n    }\n    submitHandler = e => {\n        e.preventDefault()\n       \n        const { title } = this.state\n      \n        if (!title.trim()) {\n            return this.props.showAlert(\"The post name can't be the empty string\")\n        }\n\n        const newPost = {\n            title, id: Date.now().toString()\n        }\n      \n        this.props.createPost(newPost)\n         this.reset()\n        \n    }\n\n    reset = ()=>{\n        this.setState({title: ''})\n    }\n\n     handleInputChange = e => {\n        this.setState(prev => ({...prev, ...{\n            [e.target.name]: e.target.value\n        }\n        }))\n        \n    }\n    \n     render() {\n        \n        return (\n            <form onSubmit={this.submitHandler}>\n                { this.props.text  && <Alert text={this.props.text } />}\n            <div className=\"form-group\">\n            <label htmlFor=\"title\">Заголовок поста</label>\n                    <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleInputChange} className=\"form-control\" id=\"title\" />\n            </div>\n            <button className=\"btn btn-success\" type= \"submit\">Создать</button>\n        </form>\n        )\n    }\n }\n\nconst mapDispatchToProps = {\n    createPost, showAlert,\n}\nconst mapStateToProps = (state) => {\n    return {\n         text: state.app.alert\n     }\n }\nexport default connect(mapStateToProps,mapDispatchToProps)(PostForm)","import React from 'react'\n\nexport default ({post}) => {\n    return (\n        <div className=\"card\">\n  <div className=\"card-body\">\n    <h5 className=\"card-title\"> {post.title}</h5>\n  </div>\n</div>\n    )\n}","import React from 'react'\nimport Post from './Post.js'\nimport {connect} from 'react-redux'\n\n\nconst Posts =  ({ myPosts }) => {\n    const postLength = myPosts.length\n    return (\n        !postLength ? <h4>Постов еще нет</h4>: (myPosts.map(post => <Post post={post} key={post.id}/>))\n    )\n}\nconst mapStateToPropse = state => {\n    return {\n        myPosts: state.posts.posts\n    }\n}\n\nexport default connect(mapStateToPropse,null)(Posts)","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { useDispatch } from 'react-redux'\nimport { fetchPosts } from '../redux/actions.js'\nimport Post from './Post.js'\n\nexport default () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts.fetchedPosts);\n  const loader = useSelector(state => state.app.loading);\n  const postLength = posts.length;\n  console.log(loader);\n\n  if (loader) {\n    return (<h1>Loading...</h1>)\n  }\n  \n  return ( \n  !postLength ? (<button className=\"btn btn-primary\" onClick={()=> dispatch(fetchPosts())}>Загрузить</button>) :\n                (posts.map(post => <Post post={post} key={post.id} />))\n    )   \n}","\nimport React from 'react'\nimport PostForm from './components/PostForm.js'\nimport Posts from './components/Posts.js'\nimport FetchedPosts from './components/FetchedPosts.js'\n\n\nfunction App() {\n  return (\n    <div className=\"containern pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm/>\n      </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Синхронные посты</h2>\n          <Posts/>\n      </div>\n      </div>\n      <div className=\"col\">\n        <h2>Асинхронные посты</h2>\n         <FetchedPosts/> \n   </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER } from \"./types\"\n\nconst initialState = {\n   loading: false,\n   alert: null\n}\n\nexport const appReducer = (state = initialState, action)=>{\n   \n   switch (action.type) {\n      case SHOW_LOADER:\n         return { ...state, loading: true }\n      case HIDE_LOADER:\n         return { ...state, loading: false }\n      case SHOW_ALERT:\n         return { ...state, alert: action.payload }\n      case HIDE_ALERT:\n         return { ...state, alert: null }\n      default: return state\n   }\n}","import { CREATE_POST, FETCHED_POST } from \"./types\"\n\nconst initialState = {\n   posts: [],\n   fetchedPosts: []\n}\n\nexport const postsReducer = (state = initialState, action) => {\n   switch (action.type) {\n      case CREATE_POST:\n         return { ...state, posts: state.posts.concat(action.payload) }\n         // return {...state, posts:[...state.posts, action.payload]}\n      case FETCHED_POST:\n         return {...state, fetchedPosts: action.payload}\n      default: return state\n   }\n  \n}","import { combineReducers } from \"redux\";\nimport { appReducer } from \"./appReducer\";\nimport {postsReducer} from './postReducer'\n\nexport const rootReducer = combineReducers({\n   posts: postsReducer,\n   app: appReducer,\n})","import { call, put, takeEvery } from  'redux-saga/effects'\nimport { hideLoader, showLoader,showAlert } from './actions'\nimport { FETCHED_POST, REQUEST_POSTS } from './types.js'\n\n\n\nfunction*  sagaWorker() {\n   try {\n      yield put(showLoader())\n      const payload = yield call(fetchData)\n      yield put({ type: FETCHED_POST, payload })\n      yield put(hideLoader())\n   } catch (e) {\n      yield put(showAlert(e.message))\n      yield put(hideLoader())\n   }\n}\n\nasync function fetchData() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=6')\n      return await response.json() \n}\n\nexport function* sagaWatcher() {\n  yield takeEvery(REQUEST_POSTS, sagaWorker);\n}\n\n","import React from 'react';\nimport {render} from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'\nimport reportWebVitals from './reportWebVitals';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga'\nimport App from './App';\nimport { rootReducer } from './redux/rootReducers'\nimport {sagaWatcher} from './redux/sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(rootReducer, compose(applyMiddleware(\n  thunk,\n  sagaMiddleware\n),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nsagaMiddleware.run(sagaWatcher)\n\nrender(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}